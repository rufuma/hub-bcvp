#coding:utf8


# 解决 OpenMP 库冲突问题
import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt


'''改用交叉熵实现一个多分类任务，五维随机向量最大的数字在哪维就属于哪一类。'''

class TorchModel(nn.Module):
    def __init__(self,input_size):
        super(TorchModel, self).__init__()
        self.fc1 = nn.Linear(input_size,5)
        # self.activation=torch.sigmoid
        self.loss=nn.CrossEntropyLoss()

    def forward(self,x,y=None):
        x = self.fc1(x)
        # y_pred = self.activation(x)
        if y is not None:
            return self.loss(x,y)
        else:
            return torch.softmax(x,dim=1)

def build_sample():
    x=np.random.random(5)
    y=np.argmax(x)
    return x,y

def build_dataset(total_sample_num):
    X=[]
    Y=[]
    for i in range(total_sample_num):
        x,y=build_sample()
        X.append(x)
        Y.append(y)
    X_np = np.array(X)
    Y_np = np.array(Y)

    return torch.FloatTensor(X_np), torch.LongTensor(Y_np)

def evaluate(modle):
    modle.eval()
    test_sample_num=100
    x,y=build_dataset(test_sample_num)
    print(f"本次预测集样本分布：{torch.bincount(y)}")
    correct,wrong=0,0
    with torch.no_grad():
        y_pred=modle(x)
        for y_p,y_t in zip(y_pred,y):
            pred_class=torch.argmax(y_p)
            if pred_class == y_t:
                correct+=1
            else:
                wrong+=1
    print("正确预测个数：%d, 正确率：%f" % (correct, correct / (correct + wrong)))
    return correct / (correct + wrong)





def main():
    epoch_sum=20
    batch_size=32
    train_sample=5000
    input_size=5
    learning_rate=0.001
    model=TorchModel(input_size)
    optim=torch.optim.Adam(model.parameters(),lr=learning_rate)
    log=[]
    train_x,train_y=build_dataset(train_sample)
    for epoch in range(epoch_sum):
        model.train()
        watch_loss=[]
        for batch_index in range(train_sample//batch_size):
            x=train_x[batch_index*batch_size:(batch_index+1)*batch_size]
            y=train_y[batch_index*batch_size:(batch_index+1)*batch_size]
            loss=model(x,y)
            loss.backward()
            optim.step()
            optim.zero_grad()
            watch_loss.append(loss.item())
        print("====\n第%d轮平均loss：%f"%(epoch+1,np.mean(watch_loss)))
        acc=evaluate(model)
        log.append([acc,float(np.mean(watch_loss))])
        torch.save(model.state_dict(),'model.pt')
        print(log)
        plt.plot(range(len(log)),[l[0] for l in log],label='acc')
        plt.plot(range(len(log)),[l[1] for l in log],label='loss')
        plt.legend()
        plt.show()

def predict(model_path,input_vec):
    input_size=5
    model=TorchModel(input_size)
    model.load_state_dict(torch.load(model_path, weights_only=True))
    print(model.state_dict())

    model.eval()
    with torch.no_grad():
        result=model.forward(torch.FloatTensor(input_vec))
    for vec,res in zip(input_vec,result):
        pred_class=torch.argmax(res)
        probability=res[pred_class]
        print("输入：%s，预测类别：%d，概率值：%f"%(vec,pred_class.item(), probability.item()))

if __name__ == "__main__":
    main()
    test_vec = [[0.07889086,0.15229675,0.31082123,0.03504317,0.88920843],
                [0.74963533,0.5524256,0.95758807,0.90020434,0.84890681],
                [0.90797868,0.67482528,0.13625847,0.34675372,0.19871392],
                [0.99349776,0.59416669,0.92579291,0.41567412,0.1358894]]
    predict("model.pt", test_vec)





